@page "/Pelicula"
@page "/Pelicula/{PeliculaId:int}"
@inject HttpClient httpClient
@using Newtonsoft.Json;
@using System.Text;
@*@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador,Empleado")]*@

<EditForm Model="pelicula" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">

			@*Encabezado*@
			<div class="card-header">
				<h3 class="card align-items-center">Movies</h3>
			</div>

			<div class="card-body">
				@*Buscar*@
				<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
					<label>Buscar Libro</label>
					<div class="input-group mb-3">
						<InputNumber @bind-Value="pelicula.PelicualId" class="form-control" aria-describedby="buscarButton" />
						<button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
							<i class="oi oi-magnifying-glass" />
						</button>
					</div>
				</div>

				@*Imagen*@
				<div class="mb-3">
					<label class="form-label">Agregar Imagen</label>
					<input type="file" OnChange="OnChange" class="form-control" />
					@if (pelicula.Imagen != null)
					{
						<img src="@pelicula.Imagen" alt="Imagen del Libro" />
					}
				</div>

				@*Imagen*@
				@*<div class="contenedor-destino-arrastre @claseEncima" @ondragenter="OnDragEnter"
				@ondragover="OnDragEnter" @ondragleave="OnDragLeave">
				<InputFile multiple OnChange="OnChange"></InputFile>
				</div>

				<div class="contenedor-imagen">
				@foreach (var imagen in imagenes)
				{
				<img src="@imagen" />
				}
				</div>*@

				@*	<div class="input-group">
				<div class="custom-file">
				<InputFile class="custom-file-input" multiple OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="Imagen" name="upload" />
				<label class="custom-file-label" for="inputFile">Choose file</label>
				</div>
				@*<div class="input-group-append">
				<button class="btn btn-success" disabled="@isDisabled">Upload</button>
				</div>*@

				@*@foreach (var imagen in imagenes)
				{
				<img src="data:@imagen" />
				}
				*@
				<br>

				@*Titulo*@
				<div class="col-md-15">
					<div class="input-group">
						<span class="input-group-text">T&iacutetulo</span>
						<InputText @bind-Value="pelicula.Titulo" class="form-control"></InputText>
						<ValidationMessage For="@(() =>pelicula.Titulo)" />
					</div>
				</div>

				<br>

				<div class="row">
					@*Email*@
					<div class="col-md-6">
						<div Class="form-group">
							<div class="input-group">
								<span class="input-group-text">Email</span>
								<InputText @bind-Value="pelicula.Email" class="form-control"></InputText>
								<ValidationMessage For="@(() =>pelicula.Email)" />
							</div>
						</div>
					</div>

					@*Fecha*@
					<div class="col-md-6">
						<div Class="form-group">
							<div class="input-group">
								<span class="input-group-text">Fecha</span>
								<InputDate @bind-Value="pelicula.Fecha" class="form-control"></InputDate>
								<ValidationMessage For="@(() =>pelicula.Fecha)" />
							</div>
						</div>
					</div>
				</div>

				<br>

				@*Reseña*@
				<div class="mb-3">
					<div Class="form-group">
						<div class="input-group">
							<span class="input-group-text">Rese&ntildea</span>
							<InputTextArea @bind-Value="pelicula.Resena" class="form-control"></InputTextArea>
							<ValidationMessage For="@(() => pelicula.Resena)" />
						</div>
					</div>
				</div>

				@*Puntuacion*@
				<div class="row">
					<div class="col-3">
						<div Class="form-group">
							<div class="input-group">
								<span class="input-group-text">Puntuaci&oacuten 1/10</span>
								<InputNumber @bind-Value="pelicula.Puntuacion" class="form-control"></InputNumber>
								<ValidationMessage For="@(() =>pelicula.Puntuacion)" />
							</div>
						</div>
					</div>

					@*Link*@
					<div class="col-9">
						<div Class="form-group">
							<div class="input-group">
								<span class="input-group-text">Link</span>
								<InputText @bind-Value="pelicula.Trailer" class="form-control"></InputText>
								<ValidationMessage For="@(() =>pelicula.Trailer)" />
							</div>
						</div>
					</div>
				</div>
			</div>

			@*Botones*@
			<div class="card-footer d-flex justify-content-center">
				<div class="btn-group" role="group">
					<button type="button" class="btn btn-outline-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo</button>
					<button type="submit" class="btn btn-outline-success"> <i class="oi oi-document" /> Guardar</button>
					<button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="io io-trash" /> Eliminar</button>
				</div>
			</div>
		</div>
	</div>
	@if (Mensaje.Length > 0)
	{
		<label class="text-danger">@Mensaje</label>
	}
</EditForm>

@code {
	[Parameter]
	public int PeliculaId { get; set; }
	public Peliculas pelicula { get; set; } = new Peliculas();

	public List<byte[]> imagenes { get; set; } = new List<byte[]>();
	private const int tamañoMaximoArchivo = 2 * 1024 * 1024;
	private string claseEncima = string.Empty;

	private string Mensaje = string.Empty;

	void OnDragEnter(DragEventArgs e) => claseEncima = "hover";
	void OnDragLeave(DragEventArgs e) => claseEncima = string.Empty;

	public async Task OnChange(InputFileChangeEventArgs e)
	{
		foreach (var archivo in e.GetMultipleFiles())
		{
			using var stream = archivo.OpenReadStream(tamañoMaximoArchivo);
			using var ms = new MemoryStream();
			await stream.CopyToAsync(ms);
			byte[] byteArray = ms.ToArray();
			imagenes.Add(byteArray);
		}
	}

	//async Task OnChange(InputFileChangeEventArgs e)
	//{
	//	foreach (var archivo in e.GetMultipleFiles())
	//	{
	//		using var stream = archivo.OpenReadStream(tamañoMaximoArchivo);
	//		using var ms = new MemoryStream();
	//		await stream.CopyToAsync(ms);
	//		imagenes.Add($"data:{archivo.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}");
	//	}
	//}

	protected override async Task OnInitializedAsync()
	{
		if (PeliculaId > 0)
		{
			this.pelicula.PelicualId = PeliculaId;
			await Buscar();
		}
	}

	public async Task Buscar()
	{
		var peliculaEncotrado = await httpClient.GetFromJsonAsync<Peliculas>($"api/Peliculas/{pelicula.PelicualId}");

		if (peliculaEncotrado != null)
		{
			this.pelicula = peliculaEncotrado;
			StateHasChanged();
		}
		else
		{
			Mensaje = "No fue encontrado";
		}
	}

	public async Task Guardar()
	{
		using var response = await httpClient.PostAsJsonAsync("api/Peliculas", pelicula);

		if (Validar())
		{
			if (response.IsSuccessStatusCode)
			{
				var peliculaDevuelta = await response.Content.ReadFromJsonAsync<Peliculas>();

				if (peliculaDevuelta is not null)
				{
					this.pelicula = peliculaDevuelta;
					Nuevo();
					Mensaje = "Se guardo correctamente";
				}
				else
				{
					Mensaje = "No guardo";
				}
			}
			else
			{
				Mensaje = "Error!!!, intente de nuevo";
			}
		}
	}

	public void Nuevo()
	{
		this.pelicula = new Peliculas();
		Mensaje = string.Empty;
	}

	public bool Validar()
	{
		if (string.IsNullOrEmpty(pelicula.Titulo) || pelicula.PelicualId < 0)
		{
			return false;
		}
		if (pelicula.Fecha != DateTime.Today)
		{
			Mensaje = "La fecha debe ser la de hoy";
			return false;
		}
		else
		{
			return true;
		}
	}

	public async Task Eliminar()
	{
		using var response = await httpClient.DeleteAsync($"api/Peliculas/{pelicula.PelicualId}");

		if (Validar())
		{
			if (!response.IsSuccessStatusCode)
			{
				Mensaje = "No se logro eliminar";
				return;
			}
			else
			{
				Nuevo();
				Mensaje = "Se ha eliminado correctamente";
			}
		}
	}
}
